/* Requires the Kubernetes Pipeline plugin */
pipeline {
    environment {
      CI_SKIP = "false"
      BUILD_RESULT = 'ABORTED'
      RESULTS_FILE_NAME = 'job-results.txt'
    }
    agent {
      kubernetes {
        yamlFile 'cicd/node-git-chromium-pod.yaml'
      }
    }
    // when {
    //     not {
    //       changelog '.*^\\[ci skip\\] .+$'
    //     }
    // }
    stages {
        stage('prepare') { steps { check() } }
        // stage('Test') {
        //   steps {
        //       sh 'yarn'
        //       sh 'yarn test:headless'
        //   }
        // }
        stage('Bump version') {
          steps {
              container('node-git-chromium') {
                // withCredentials([sshUserPrivateKey(credentialsId: 'bitbucket-ssh-creds', keyFileVariable: 'SSH_KEY')]) {
                  sshagent(credentials: ['bitbucket-ssh-creds']) {
                    sh """
                      git config --global --add safe.directory ${env.WORKSPACE}
                      git checkout main
                      npm version patch -m  "Upgrade to new version [ci skip\\]"
                    """
                  }
                // }
              }
              // withCredentials([sshUserPrivateKey(credentialsId: 'bitbucket-ssh-creds', keyFileVariable: 'SSH_KEY')]) {
              //     sshagent(credentials: ['bitbucket-ssh-creds']) {
              //         sh "git push"
              //     }
              // }
          }
        }
        stage('build') {
            steps {
                sh '''
                  node --version
                  echo 'Building the app...'
                  'yarn build'
                '''
                script {
                  env.BUILD_RESULT = 'SUCCESSFULLY BUILT'
                }
            }
        }
    }

    post {
      always {
          postProcess()
          writeFile file: RESULTS_FILE_NAME, text: "The build result: ${env.BUILD_RESULT}"
          archiveArtifacts RESULTS_FILE_NAME
      }
    }
}

void check() {
    result = sh (script: "git log -1 | grep '.*\\[ci skip\\].*'", returnStatus: true)
    if (result == 0) {
        env.CI_SKIP = "true"
        error "'[ci skip]' found in git commit message. Aborting."
    }
}

void postProcess() {
    if (env.CI_SKIP == "true") {
        env.result = 'SKIPPED'
    }
}
